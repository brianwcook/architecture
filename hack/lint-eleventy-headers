#!/bin/bash

# lint-eleventy-headers - Validate Eleventy front matter in markdown files
#
# This script checks all markdown files to ensure they have valid Eleventy
# front matter (YAML headers delimited by ---).
#
# Exit codes:
#   0 - All markdown files have valid front matter
#   1 - One or more files have invalid or missing front matter

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Function to print error messages
error() {
    echo -e "${RED}ERROR:${NC} $1" >&2
}

# Function to print success messages
success() {
    echo -e "${GREEN}SUCCESS:${NC} $1"
}

# Function to print info messages
info() {
    echo -e "${BLUE}INFO:${NC} $1"
}

# Function to print warning messages
warning() {
    echo -e "${YELLOW}WARNING:${NC} $1"
}

# Function to validate front matter in a file
validate_front_matter() {
    local file="$1"
    local filename=$(basename "$file")

    # Check if file starts with ---
    if ! head -n 1 "$file" | grep -q "^---$"; then
        echo "Missing front matter delimiter at start"
        return 1
    fi

    # Extract the front matter (between first and second --- lines only)
    local front_matter
    # Use awk to extract only between line 1 (first ---) and the next ---
    front_matter=$(awk '/^---$/{if(++count==2) exit; next} count==1' "$file")

    # Check if we found a closing ---
    local second_delimiter_line
    second_delimiter_line=$(awk '/^---$/{line=NR; count++; if(count==2){print line; exit}}' "$file")
    if [[ -z "$second_delimiter_line" ]]; then
        echo "Missing closing front matter delimiter"
        return 1
    fi

    # Check if front matter is empty
    if [[ -z "$front_matter" ]]; then
        echo "Empty front matter"
        return 1
    fi

    # Validate YAML syntax using Python (available on most systems)
    if command -v python3 >/dev/null 2>&1; then
        if ! echo "$front_matter" | python3 -c "import sys, yaml; yaml.safe_load(sys.stdin)" 2>/dev/null; then
            echo "Invalid YAML syntax"
            return 1
        fi
    fi

    # Check for required 'title' field
    if ! echo "$front_matter" | grep -q "^title:"; then
        echo "Missing required 'title' field"
        return 1
    fi

    return 0
}

# Find all markdown files (excluding generated sites and node_modules)
cd "$REPO_ROOT"

markdown_files=()
while IFS= read -r -d '' file; do
    markdown_files+=("$file")
done < <(find architecture -name "*.md" -type f \
    ! -path "./_site/*" \
    ! -path "./node_modules/*" \
    ! -path "./.git/*" \
    -print0 | sort -z)

if [[ ${#markdown_files[@]} -eq 0 ]]; then
    warning "No markdown files found"
    exit 0
fi

info "Found ${#markdown_files[@]} markdown files to check"

# Track errors
errors=0
total_files=${#markdown_files[@]}

echo "Checking Eleventy front matter..."
echo "=================================="

# Process each markdown file
for file in "${markdown_files[@]}"; do
    # Remove leading ./ for cleaner display
    display_path="${file#./}"

    # Print filename without newline
    printf "%-60s " "$display_path:"

    # Validate the front matter
    if error_msg=$(validate_front_matter "$file" 2>&1); then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${RED}FAIL${NC}"
        error "$display_path: $error_msg"
        ((errors++))
    fi
done

echo "=================================="

# Summary
if [[ $errors -eq 0 ]]; then
    success "All $total_files markdown files have valid Eleventy front matter"
    exit 0
else
    error "$errors out of $total_files files have front matter issues"
    exit 1
fi
